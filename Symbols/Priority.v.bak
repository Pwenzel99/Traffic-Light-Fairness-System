module Priority(z,y);
	input [3:0] z;
	output [3:0] y;
	
	reg [3:0] y;
	
	always @(z[3] or z[2] or z[1] or z[0])
		begin
			case({z[3],z[2],z[1],z[0]})
				4'b0000: {y[3],y[2],y[1],y[0]} = 4'b0000;
				4'b0001: {y[3],y[2],y[1],y[0]} = 4'b0001;
				4'b0010: {y[3],y[2],y[1],y[0]} = 4'b0010;
				4'b0011: {y[3],y[2],y[1],y[0]} = 4'b0010;
				4'b0100: {y[3],y[2],y[1],y[0]} = 4'b0100;
				4'b0101: {y[3],y[2],y[1],y[0]} = 4'b0100;
				4'b0110: {y[3],y[2],y[1],y[0]} = 4'b0100;
				4'b0111: {y[3],y[2],y[1],y[0]} = 4'b0100;
				4'b1000: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1001: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1010: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1011: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1100: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1101: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1110: {y[3],y[2],y[1],y[0]} = 4'b1000;
				4'b1111: {y[3],y[2],y[1],y[0]} = 4'b1000;
			endcase
		end
	endmodule